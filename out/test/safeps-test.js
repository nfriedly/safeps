// Generated by CoffeeScript 1.9.2
(function() {
  var assert, base, deepEqual, equal, errorEqual, joe, ref, safeps, travis;

  assert = require('assert');

  ref = require('assert-helpers'), equal = ref.equal, deepEqual = ref.deepEqual, errorEqual = ref.errorEqual;

  joe = require('joe');

  safeps = require('../../');

  travis = process.env.TRAVIS_NODE_VERSION != null;

  if ((base = process.env).LANG == null) {
    base.LANG = 'en_AU.UTF-8';
  }

  joe.describe('modules', function(describe, it) {
    var nodeVersion;
    describe('locale', function(describe, it) {
      describe('getLocaleCode', function(describe, it) {
        it('should fetch something from the environment', function() {
          var localeCode;
          localeCode = safeps.getLocaleCode();
          console.log('localeCode:', localeCode);
          return assert.ok(localeCode);
        });
        return it('should fetch something when passed something', function() {
          var localeCode;
          localeCode = safeps.getLocaleCode('fr-CH');
          equal(localeCode, 'fr_ch');
          localeCode = safeps.getLocaleCode('fr_CH');
          return equal(localeCode, 'fr_ch');
        });
      });
      describe('getCountryCode', function(describe, it) {
        it('should fetch something', function() {
          var countryCode;
          countryCode = safeps.getCountryCode();
          console.log('countryCode:', countryCode);
          return assert.ok(countryCode);
        });
        return it('should fetch something when passed something', function() {
          var countryCode;
          countryCode = safeps.getCountryCode('fr-CH');
          return equal(countryCode, 'ch');
        });
      });
      return describe('getLanguageCode', function(describe, it) {
        it('should fetch something', function() {
          var languageCode;
          languageCode = safeps.getLanguageCode();
          console.log('languageCode:', languageCode);
          return assert.ok(languageCode);
        });
        return it('should fetch something when passed something', function() {
          var languageCode;
          languageCode = safeps.getLanguageCode('fr-CH');
          return equal(languageCode, 'fr');
        });
      });
    });
    describe('getHomePath', function(describe, it) {
      return it('should fetch home', function(done) {
        return safeps.getHomePath(function(err, path) {
          errorEqual(err, null);
          console.log('home:', path);
          assert.ok(path);
          return done();
        });
      });
    });
    describe('getTmpPath', function(describe, it) {
      return it('should fetch tmp', function(done) {
        return safeps.getTmpPath(function(err, path) {
          errorEqual(err, null);
          console.log('tmp:', path);
          assert.ok(path);
          return done();
        });
      });
    });
    if (!travis) {
      describe('getExecPath', function(describe, it) {
        return it('should fetch ruby', function(done) {
          var wasSync;
          wasSync = 0;
          safeps.getExecPath('ruby', function(err, path) {
            wasSync = 1;
            errorEqual(err, null);
            console.log('ruby:', path);
            assert.ok(path);
            return done();
          });
          return equal(wasSync, 0);
        });
      });
    }
    describe('getGitPath', function(describe, it) {
      return it('should fetch git', function(done) {
        return safeps.getExecPath('git', function(err, path) {
          errorEqual(err, null);
          console.log('git:', path);
          assert.ok(path);
          return done();
        });
      });
    });
    describe('getNodePath', function(describe, it) {
      it('should fetch node', function(done) {
        return safeps.getExecPath('node', function(err, path) {
          errorEqual(err, null);
          console.log('node:', path);
          assert.ok(path);
          return done();
        });
      });
      it('should fetch node from cache', function(done) {
        var wasSync;
        wasSync = 0;
        safeps.getExecPath('node', function(err, path) {
          wasSync = 1;
          errorEqual(err, null);
          console.log('node:', path);
          return assert.ok(path);
        });
        equal(wasSync, 1);
        return done();
      });
      return it('should fetch node without cache synchronously', function(done) {
        var wasSync;
        wasSync = 0;
        safeps.getExecPath('node', {
          sync: true,
          cache: false
        }, function(err, path) {
          wasSync = 1;
          errorEqual(err, null);
          console.log('node:', path);
          return assert.ok(path);
        });
        equal(wasSync, 1);
        return done();
      });
    });
    describe('getNpmPath', function(describe, it) {
      return it('should fetch npm', function(done) {
        return safeps.getExecPath('npm', function(err, path) {
          errorEqual(err, null);
          console.log('npm:', path);
          assert.ok(path);
          return done();
        });
      });
    });
    nodeVersion = null;
    describe('spawn node', function(describe, it) {
      it('should work asynchronously', function(done) {
        return safeps.spawn('node --version', function(err, stdout, stderr, status, signal) {
          errorEqual(err, null);
          console.log('node version:', stdout.toString().trim());
          equal(stdout instanceof Buffer, true);
          assert.ok(stdout);
          nodeVersion = stdout.toString().trim();
          return done();
        });
      });
      if (safeps.hasSpawnSync()) {
        it('should work synchronously with callback', function(done) {
          var wasSync;
          wasSync = 0;
          safeps.spawnSync('node --version', function(err, stdout, stderr, status, signal) {
            wasSync = 1;
            errorEqual(err, null);
            console.log('node version:', stdout.toString().trim());
            equal(stdout instanceof Buffer, true);
            return assert.ok(stdout);
          });
          equal(wasSync, 1);
          return done();
        });
      }
      if (safeps.hasSpawnSync()) {
        it('should work synchronously', function() {
          var error, ref1, signal, status, stderr, stdout;
          ref1 = safeps.spawnSync('node --version'), error = ref1.error, stdout = ref1.stdout, stderr = ref1.stderr, status = ref1.status, signal = ref1.signal;
          equal((error != null ? error.stack : void 0) || null, null);
          console.log('node version:', stdout.toString().trim());
          equal(stdout instanceof Buffer, true);
          return assert.ok(stdout);
        });
      }
      return it("can't read if stdio is set", function(done) {
        return safeps.spawn('node --version', {
          stdio: 'inherit'
        }, function(err, stdout, stderr, status, signal) {
          errorEqual(err, null);
          equal(stdout, null);
          equal(stderr, null);
          return done();
        });
      });
    });
    describe('exec node', function(describe, it) {
      it('should work asynchronously', function(done) {
        return safeps.exec('node --version', function(err, stdout, stderr) {
          errorEqual(err, null);
          console.log('node version:', stdout.toString().trim());
          assert.ok(stdout);
          return done();
        });
      });
      if (safeps.hasExecSync()) {
        it('should work synchronously with callback', function(done) {
          var wasSync;
          wasSync = 0;
          safeps.execSync('node --version', function(err, stdout, stderr, status, signal) {
            wasSync = 1;
            errorEqual(err, null);
            console.log('node version:', stdout.toString().trim());
            return assert.ok(stdout);
          });
          equal(wasSync, 1);
          return done();
        });
      }
      if (safeps.hasExecSync()) {
        return it('should work synchronously', function() {
          var error, ref1, stderr, stdout;
          ref1 = safeps.execSync('node --version'), error = ref1.error, stdout = ref1.stdout, stderr = ref1.stderr;
          equal((error != null ? error.stack : void 0) || null, null);
          console.log('node version:', stdout.toString().trim());
          return assert.ok(stdout);
        });
      }
    });
    return describe('spawn node module', function(describe, it) {
      return it('should work', function(done) {
        return safeps.spawnNodeModule('coffeelint', ['--version'], function(err, stdout, stderr, status, signal) {
          errorEqual(err, null);
          console.log('coffeelint version:', stdout.toString().trim());
          equal(stdout instanceof Buffer, true);
          assert.ok(stdout);
          nodeVersion = stdout.toString().trim();
          return done();
        });
      });
    });
  });

}).call(this);
